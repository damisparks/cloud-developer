service: dami-discussion-service

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tracing:
    lambda: true
    apiGateway: true
  apiGateway:
    minimumCompressionSize: 1024

  environment:
    TODOS_TABLE: Capstone-Todos-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    IMAGE_S3_BUCKET: damisparks-serverless-todo-app-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: DamiSparks Serverless API
        description: Serverless application for Todo Application
    models:
      - name: TodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: TodoUpdate
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth

  # CREATE TODO FUNCTION
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': TodoRequest
    iamRoleStatementsName: CreateTodo-${self:provider.stage}-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # UPDATE TODO FUNCTION
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a todo
            description: Update a todo
            requestModels:
              'application/json': TodoUpdate
    iamRoleStatementsName: UpdateTodo-${self:provider.stage}-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # DELETE TODO FUNCTION
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: DeleteTodo-${self:provider.stage}-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # GENERATING GENERATEUPLOADURL FUNCTION 
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
    iamRoleStatementsName: GenerateUploadUrl-${self:provider.stage}-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*

# AWS RESOURCES
resources:
  - ${file(./src/resources/apiGateway.yml)}
  - ${file(./src/resources/dynamoDb.yml)}
  - ${file(./src/resources/s3.yml)}
